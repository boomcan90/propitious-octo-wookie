from pythonMahjong import *
from MahjongFunctions import *
from StateMachine import StateMachine

############################################################################################
'''INITIALISATION'''

#Creating user objects
User1 = User('User1')
User2 = User('User2')

#Creating 3 tiles for user 1
Tile1_1 = Tile('down')
Tile1_2 = Tile('down')
Tile1_3 = Tile('up')
User1.tiles = [Tile1_1, Tile1_2, Tile1_3]

#Creating 3 tiles for user 2
Tile2_1 = Tile('down')
Tile2_2 = Tile('down')
Tile2_3 = Tile('down')
User2.tiles = [Tile2_1, Tile2_2, Tile2_3]

#Generating list of tiles. 
listOfTiles = randomTileGen(100)

#Assigning tiles to the three tile objects in each user object.
for i in User1.tiles:
	i.whoami = listOfTiles[0]
	listOfTiles.remove(listOfTiles[0])
	print i.whoami

for j in User2.tiles:
	j.whoami = listOfTiles[0]
	listOfTiles.remove(listOfTiles[0])
	print j.whoami

############################################################################################
#ASSUMING THAT P1 IS USER 1.
'''
HOW THE SM WORKS:
INPUT: LIST WITH 7 ELEMENTS
pass in list with format: 6 tiles, 1 state
First 3 are p1's
Last 3 are p2's
Last item is the prevState (str). It can be:
-game_started
-p1_turn_start
-p2_turn_start
-p1_turn_end
-p2_turn_end
-p1_win
-p2_win
'''
def game_started(inpList):
	#Separating orientation of tiles of P1 and P2
	orientationP1 = []
	orientationP2 = []
	for i in range(0, 3):
		orientationP1.append(inpList[i].orientation)
	for j in range(3,6):
		orientationP2.append(inpList[j].orientation)

#Now if all tiles orientation is down, start game.
#Else, error
	if (orientationP1.count('up') == 2 and orientationP1.count('up') == 1 and orientationP2.count('down') == 3):
		newState = 'p1_turn_start'
		inpList[len(inpList)-1] = 'p1_turn_start'

	else:
		print 'Error!'

	return(newState, inpList)


def p1_turn_start(inpList):
	#UPDATE TILE VALUES HERE. RUN WHILE LOOP UNTIL YOU GET ALL 3 UP. UPDATE INPLIST

	orientationP1 = []
	orientationP2 = []
	listTilesP1 = []

	for i in range(0, 3):
		orientationP1.append(inpList[i].orientation)
	for j in range(3,6):
		orientationP2.append(inpList[j].orientation)

	for i in range(0, 3):
		listTilesP1.append(inpList[i].whoami)

	#Now, if all tiles of p1 are up, it means that it must go to p1_turn_end

	if(orientationP1.count('up') == 3):
		newState = 'p1_turn_end'
		inpList[len(inpList)-1] = 'p1_turn_end'

	#Check if p1 has won:

	if(listTilesP1 in MahjongFunctions.winnngCombinations):
		newState = 'p1_win'
		inpList[len(inpList)-1] = 'p1_win'

	return(newState, inpList)

	


def p1_turn_end():
	print "it's player 2's turn now."






























############################################################################################
#Setting up game:
allTiles = []
allTiles.extend(User1.tiles)
allTiles.extend(User2.tiles)
